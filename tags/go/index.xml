<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Go on Dana Woodman </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://danawoodman.com/tags/go/index.xml</link>
    
    
    
    <updated>Fri, 25 Apr 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Run &#39;go fmt&#39; in vim on save</title>
      <link>http://danawoodman.com/blarg/run-go-fmt-vim</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 UTC</pubDate>
      
      <guid>http://danawoodman.com/blarg/run-go-fmt-vim</guid>
      <description>&lt;p&gt;One of the really awesome things about Golang is the &lt;code&gt;go fmt&lt;/code&gt; command which forces your code to conform to a common formatting convention.&lt;/p&gt;

&lt;p&gt;However, running a file through &lt;code&gt;go fmt&lt;/code&gt; isn&amp;rsquo;t automatic out of the gate, but if you use vim the following snippet will cause &lt;code&gt;go fmt&lt;/code&gt; to be run every time you save a go file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;vim&#34;&gt;&amp;quot; Run go-fmt on Go source code on save.
autocmd FileType go autocmd BufWritePre &amp;lt;buffer&amp;gt; Fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try this out next time you&amp;rsquo;re writing go and you&amp;rsquo;ll be happy you have it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go packages are your friend</title>
      <link>http://danawoodman.com/blarg/go-packages-are-your-friend</link>
      <pubDate>Fri, 21 Feb 2014 00:00:00 UTC</pubDate>
      
      <guid>http://danawoodman.com/blarg/go-packages-are-your-friend</guid>
      <description>&lt;p&gt;The approach I&amp;rsquo;ve been taking lately is to start my projects in the &lt;code&gt;main&lt;/code&gt; package and as I go &lt;em&gt;keep an eye for any emerging patterns&lt;/em&gt; or abstractions I can make.&lt;/p&gt;

&lt;p&gt;Once I see something I feel can be pulled out of my code, I put it into a sub-directory in my project, give it a descriptive package name and then &lt;em&gt;import it into my main package&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If a package is specific to the project I&amp;rsquo;m working on and would have little value as an external library, I&amp;rsquo;ll keep it in the sub-directory. Otherwise, I will abstract out the package into it&amp;rsquo;s own repository and &lt;em&gt;think more seriously about the public interface&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Go makes creating new packages trivially easy: Just create a new folder &lt;code&gt;foo&lt;/code&gt;, move your &lt;code&gt;foo&lt;/code&gt; library over and change &lt;code&gt;package main&lt;/code&gt; to &lt;code&gt;package foo&lt;/code&gt;. I&amp;rsquo;d recommend taking advantage of that fact and abstract and encapsulate your code as much as possible using this convention.&lt;/p&gt;

&lt;p&gt;This can be done in many other languages, but the fact that you can &lt;code&gt;go get&lt;/code&gt; any code within a folder on Github or Google Code makes it simple to share packages with other developers or to reuse code in future projects.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re coming from a Ruby background like myself where you&amp;rsquo;d have to create a new Ruby Gem each time, you can see how this encourages code reuse at a language level.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use zero values to your advantage in go</title>
      <link>http://danawoodman.com/blarg/go-zero-values</link>
      <pubDate>Tue, 11 Feb 2014 00:00:00 UTC</pubDate>
      
      <guid>http://danawoodman.com/blarg/go-zero-values</guid>
      <description>&lt;p&gt;In Go, when a value is initialized &lt;em&gt;without a initializer value it returns the &amp;ldquo;zero value&amp;rdquo; of that type&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In our contrived example below, when we initialize the &lt;code&gt;User&lt;/code&gt; struct without an initialization value, we get the zero value of the struct. So when we get the &lt;code&gt;Admin&lt;/code&gt; value, it returns the zero value for a boolean, which is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type User struct {
    Name  string
    Admin bool
}

func main() {
    u := User{}
    fmt.Println(u.Admin) #=&amp;gt; false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We didn&amp;rsquo;t explicity set &lt;code&gt;Admin&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;; &lt;em&gt;Go did that for us&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The following zero values are created for their respective types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bool: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;string: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;int: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;float: &lt;code&gt;0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pointers, functions, interfaces, slices, channels, and maps: &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next time you&amp;rsquo;re working in go, think how you can use zero values to your advantage.&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href=&#34;http://golang.org/ref/spec#The_zero_value&#34;&gt;zero values here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall in love with go&#39;s for loop</title>
      <link>http://danawoodman.com/blarg/go-forloop-love</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 UTC</pubDate>
      
      <guid>http://danawoodman.com/blarg/go-forloop-love</guid>
      <description>&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop in Go is incredibly robust and fun to use. Here are a few examples of how to use &lt;code&gt;for&lt;/code&gt; loops for various use cases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;# Infinite loop:
for {
    # Do stuff forever...
}

# &amp;quot;Traditional&amp;quot; index loop:
for i := 0; i &amp;lt; 100; i++ {
    # Do stuff 100 times...
}

# Range with key and value:
for key, value := range arr {
    # Do stuff on everything in arr 
}

# Range with just key:
for key := range arr {
    # Do stuff on everything in arr 
}

# Range with just value:
for _, value := range arr {
    # Do stuff on everything in arr
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more about the &lt;a href=&#34;http://golang.org/doc/effective_go.html#for&#34;&gt;Go &lt;code&gt;for&lt;/code&gt; loop here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>