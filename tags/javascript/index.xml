<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on Dana Woodman </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://danawoodman.com/tags/javascript/index.xml</link>
    
    
    
    <updated>Mon, 24 Mar 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Implementing splat args in JavaScript</title>
      <link>http://danawoodman.com/blarg/splat-args-javascript</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 UTC</pubDate>
      
      <guid>http://danawoodman.com/blarg/splat-args-javascript</guid>
      <description>&lt;p&gt;Typically in JavaScript you&amp;rsquo;ll define the arguments you expect in a function like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function sayHello(message, recipient) {
  // Do something exciting here...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what happens when you want to pass an &lt;strong&gt;arbitrary amount of arguments to a function&lt;/strong&gt;, or what is often termed &amp;ldquo;splat args&amp;rdquo; in other languages?&lt;/p&gt;

&lt;p&gt;Well, JavaScript provides a special property called &lt;code&gt;arguments&lt;/code&gt; that is scoped to the function call. You can implement a form of splat args with JavaScript using the following approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function sayHello(message, recipient) {
  // args is an array of arguments passed into the function.
  var args = Array.prototype.slice.call(arguments, sayHello.length);
  // Do something exciting here...
}

// Now you can call sayHello with any number of arguments:
sayHello(&#39;Hello there!&#39;, &#39;John Smith&#39;, some, extra, args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This short line takes the arguments list and calls &lt;code&gt;Array.slice&lt;/code&gt; to get all the extra arguments beyond the position arguments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayHello.length&lt;/code&gt; is the length of the arguments passed into the function so we&amp;rsquo;re able to get all arguments after the last positional argument and put them into an array.&lt;/p&gt;

&lt;p&gt;Until the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34;&gt;spread operator&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/rest_parameters?redirectlocale=en-US&amp;amp;redirectslug=Web/JavaScript/Reference/rest_parameters&#34;&gt;rest parameters&lt;/a&gt; is implemented in ECMAScript 6, we&amp;rsquo;ll have to stick with the above, slightly hacky approach.&lt;/p&gt;

&lt;p&gt;However, when these two changes are universally implemented, we&amp;rsquo;ll be able to do the following instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;function sayHello(message, recipient, ...args) {
  // args will now be available and will
  // contain an array of the arguments passed in.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, as my friend &lt;a href=&#34;https://github.com/squeegy&#34;&gt;Alex&lt;/a&gt; points out, you can always use &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>